{{> includes/hero hero-title="Exams"}}
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  function getParamValue(param) {
    let currentUrl = window.location.href;
    if (currentUrl.split("?").length > 1) {
      let paramsString = currentUrl.split("?")[1];
      const params = paramsString.split("&");
      for (let i = 0; i < params.length; i++) {
        const key = params[i].split("=")[0];
        const value = params[i].split("=")[1];
        if (key === param) return value;
      }
    }

    return null;
  }
  console.log(getParamValue("paymentSuccess"))
  if (getParamValue("paymentSuccess") == 'true') {
    setTimeout(() => { $.notify("<b>Payment Successful</b>, you  can now <b>Take Exam</b>", { type: "success", duration: 5000 }) }, 2000);
  }
</script>
<style>
  [data-notify="container"][class*="alert-pastel-"] {
    background-color: rgb(255, 255, 238);
    border-width: 0px;
    border-left: 15px solid rgb(255, 240, 106);
    border-radius: 0px;
    box-shadow: 0px 0px 5px rgba(51, 51, 51, 0.3);
  }

  [data-notify="container"].alert-pastel-info {
    border-left-color: greenyellow;
  }

  [data-notify="container"][class*="alert-pastel-"]>[data-notify="title"] {
    color: rgb(80, 80, 57);
    display: block;
    font-weight: 700;
    margin-bottom: 5px;
  }
</style>

<div style="display: none;" id="wrapfabtest">
  <div class="adBanner">This is a test&nbsp;
  </div>
</div>


<div class="container__cstm">
  {{!-- This is exam list --}}
  <div class="exams-points">
    <h3>Points to Note</h3>
    <!--<ol>
      <li>Below are the current courses available on our platform. Please <strong>ENROLL</strong> in the course of your
        choice.</li>
      <li> If you have already enrolled in one of our courses then you <strong>Take Exam</strong> for certification
        after completing
        the <strong>whole curriculum</strong> for that given course.</li>
      <li> Inorder to get a certificate, you'll need to get aleast <strong>passing percentage</strong>. If you have score less than
        passing percent, you'll have to give the exam again. <strong>Only 3 attempts</strong> possible per single payment.</li>
    </ol>-->

    <ul class="exams-points-note">
      <li>
        <div class="count"><span>1</span></div>
        <div class="text">
          <p>Below are the current courses available on our platform. Please <strong>ENROLL</strong> in the course of
            your choice.</p>
        </div>
      </li>
      <li>
        <div class="count"><span>2</span></div>
        <div class="text">
          <p>If you have already enrolled in one of our courses then you <strong>Take Exam</strong> for certification
            after completing the <strong>whole curriculum</strong> for that given course.</p>
        </div>
      </li>
      <li>
        <div class="count"><span>3</span></div>
        <div class="text">
          <p>Inorder to get a certificate, you'll need to get aleast <strong>passing percentage</strong>. If you have
            score less than passing percent, you'll have to give the exam again. <strong>Only 3 attempts</strong>
            possible per single payment.</p>
        </div>
      </li>
    </ul>

    <div class="alert alert-warning alert-outline">
      <strong>Warning:</strong> Check / update your name before taking exam as the certificate will be generated on that
      name only & cannot be changed.
    </div>
  </div>

  <div class="row" id="exams__list">
    {{#each json.courses as |course index|}}
    <div class="col-lg-4 col-md-6 single-exam__course mb-4">
      <div class="card height--full">
        <div class="card-body row mx-0 p-0">
          <div class="card-title">
            <h3 class="text-center mb-0">{{this.title}}</h3>
          </div>
          <div class="card-text p-4 px-sm-4 py-4 width--full">
            {{#each pointers as |point| }}
            &#10004; {{ point }}<br>
            {{/each}}
            {{this.text}}
            {{!-- Here is some example text --}}
            <!--- Replace with text data {{this.text}}--->
          </div>
          <!--- Replace with a href data or write post function, depending on logic --->
          <div class="card-price width--full text-center">
            {{#if (lookup ../data this.type) }}
            <h2 class="pb-4 text-white"></h2>
            {{else}}
            <h2 class="pb-3 text-white" id="{{this.type}}curr_price">${{this.price}}</h2>
            {{/if}}
            {{#if (lookup ../data this.type) }}
            <button onclick="takeExam({{this.type}})" class="btn text-body" data-price="{{this.price}}"
              id="{{this.type}}">
              Take Exam
            </button>
            {{else}}
            <!--<div>
              <input type="text" name="codeName" placeholder="promo-code (optional)" id="{{this.type}}codeName">
              <button type="button" onclick="checkCode({{this.type}},{{this.price}})">Apply Code</button>
            </div>-->

            <div class="promoCode-block" id="{{this.type}}PromoCodeBlock">
              <div class="input-group mb-3">
                <input type="text" class="form-control" name="codeName" placeholder="promo-code (optional)"
                  id="{{this.type}}codeName">
                <div class="input-group-append">
                  <button type="button" class="btn btn-dark"
                    onclick="checkCode({{this.type}},{{this.price}})">Apply</button>
                </div>
              </div>
            </div>

            <div class="promoCode-block" id="{{this.type}}ReferralCodeBlock">
              <div class="input-group mb-3">
                <input type="text" class="form-control" name="referralCode" placeholder="referral code (optional)"
                  id="{{this.type}}ReferralCode">
                <div class="input-group-append">
                  <button type="button" class="btn btn-dark" onclick="checkReferralCode({{this.type}})">Check</button>
                </div>
              </div>
            </div>

            <button onclick="handlePayment({{this.type}},{{this.price}})" class="btn text-body btn-light mb-3"
              data-price="{{this.price}}" id="{{this.type}}">
              ENROLL
            </button>
            <div>
              <span class=" "><a href="/fmd" class="fmd-button">Apply For FundMyDegree</a></span>
              {{!-- <span class="promoCode-txt">Apply</span>
              <span class="promoCode-btn" id="{{this.type}}PromoCodeBtn">PROMO CODE</span>&nbsp;<span
                class="promoCode-txt"> --}}
            </div>
            <div id="btn-paymentModal{{this.type}}" style="display:none" data-toggle="modal"
              data-target="#paymentModal{{this.type}}">
            </div>

            <!-- Modal -->
            <div class="modal fade" id="paymentModal{{this.type}}" tabindex="-1" role="dialog"
              aria-labelledby="paymentModalTitle" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <h3 class="modal-title" style="margin-left:17% ;" id="exampleModalLongTitle">Please Select Payment
                      Method</h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>
                  <div class="modal-body">
                    {{!-- <button type="button" class="btn-payment" onclick="payViaXdce({{this.type}},{{this.price}})"
                      data-dismiss="modal"> Pay Via XDCe </button> --}}

                    <button type="button" class="btn-payment" onclick="payViaXdc({{this.type}},{{this.price}})"
                      data-dismiss="modal"> Pay Via XDC </button>



                    <button type="button" class="btn-payment" onclick="pay({{this.type}},{{this.price}})"
                      data-dismiss="modal">
                      Pay Via PayPal </button>
                    <button type="button" class="btn-payment razorpay-btn" style="display: none;"
                      onclick="payRazorpay({{this.type}},{{this.price}})" data-dismiss="modal">
                      Pay Via Netbanking / Card / UPI </button>


                  </div>
                  {{!-- <div class="modal-footer">
                    *<a href="https://chrome.google.com/webstore/detail/xinpay/bocpokimicclpaiekenaeelehdjllofo"
                      target="_blank">XinPay</a> &nbsp; web-extension is required
                  </div> --}}
                </div>
              </div>
            </div>




            <div id="btn-XinPayNotifier{{this.type}}" style="display:none" data-toggle="modal"
              data-target="#XinPayNotifier{{this.type}}">
            </div>

            <!-- Modal -->
            <div class="modal fade" id="XinPayNotifier{{this.type}}" tabindex="-1" role="dialog"
              aria-labelledby="XinPayNotifierTitle" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <h3 class="modal-title">XinPay</h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>
                  <div style="text-align: left;margin:10px">
                    <p>
                      Please note that in order to make a payment via XDC you need to have <a target="_blank"
                        href="https://chrome.google.com/webstore/detail/xinpay/bocpokimicclpaiekenaeelehdjllofo"
                        class="tooltip-test nobr" title="XinPay : XinFin's official web-extension">
                        XinPay</a> -
                      XinFin's official web-extension for payments installed.<br>
                      If you have not installed it, please install it via this <a target="_blank"
                        href="https://chrome.google.com/webstore/detail/xinpay/bocpokimicclpaiekenaeelehdjllofo"
                        class="tooltip-test nobr" title="XinPay : XinFin's official web-extension">
                        link</a>.
                    </p>

                    <p>
                      <strong>Note:</strong> For smooth transaction please disable
                      any other web3 providers like Metamask, etc., you can enable them later.
                    </p>
                  </div>

                  <div class="modal-footer">

                    <button type="button" class="xin-modal-close" data-dismiss="modal">Close</button>
                    <buton type="button" class="xin-modal-submit" onclick="launchXinPay({{this.type}},{{this.price}})"
                      data-dismiss="modal">Done
                    </buton>
                  </div>
                </div>
              </div>
            </div>

            {{/if}}

          </div>
        </div>
      </div>
    </div>
    {{/each}}




    <!-- Static Video Membership box starts -->
    <div class="col-lg-4 col-md-6 single-exam__course mb-4">
      <div class="card height--full">
        <div class="card-body row mx-0 p-0">
          <div class="card-title">
            <h3 class="text-center mb-0">Video Membership</h3>
          </div>
          <div class="card-text p-4 px-sm-4 py-4 width--full">
            ✔ Get All Video Content.<br>
            ✔ Lifetime Access.<br>
            ✔ Get access to exclusive video.<br>
          </div>
          <div class="card-price width--full text-center">
            <h2 class="pb-3 text-white" id="course_4curr_price">$149</h2>

            {{#if video }}
            <button onclick="videoScreen()" class="btn text-body btn-light mb-3" data-price="videoScreen"
              id="videoScreen">
              View Videos
            </button>
            {{else}}
            <button onclick="payVideoSub()" class=" btn text-body btn-light mb-3" data-price="149"
              id="videoMember">PayPal</button>
            {{/if}}
            <div id="btn-videoMembership" style="display:none" data-toggle="modal" data-target="#videoMembership">
            </div>


            <div id="btn-XinPayNotifiercourse_4" style="display:none" data-toggle="modal"
              data-target="#XinPayNotifiercourse_4">
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Static Video Membership box ends -->



    <button id="btn-displayHashModal" type="button" style="display: none;" class="btn btn-primary" data-toggle="modal"
      data-target="#displayHashModal">
      Open modal
    </button>

    <!-- The Modal -->
    <div class="modal fade" id="displayHashModal">
      <div class="modal-dialog">
        <div class="modal-content">

          <!-- Modal Header -->
          <div id="modal-header-wrp" class="modal-header">
            <h4 id="displayHashModal-title" class="modal-title">Title</h4>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
          </div>

          <!-- Modal body -->
          <div id="displayHashModal-body" class="modal-body">
            body
          </div>

          <!-- Modal footer -->
          <div id="displayHashModal-footer" class="modal-footer">
            <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
          </div>

        </div>
      </div>
    </div>
    <div style="width: 100%;">
      <div class="pay-with">
        We accept &nbsp;&nbsp;
        <!-- PayPal Logo --><img src="https://www.paypalobjects.com/webstatic/mktg/Logo/pp-logo-100px.png"
          style="height: 100px;width:100px;" border="0" alt="PayPal Logo"> <img
          src="https://xinfin.org/assets/images/brand-assets/xdc-logo.png" style="height: 50px;width:50px;" border="0"
          alt="XDC Logo">
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  let originCountry = "{{country}}"
  let showRazorpay = false;

  console.log(`origin country: |${ originCountry }|`, "show razorpay: ", showRazorpay);

  const xxx = "{{video}}";

  console.log("videoSub", xxx)

  if (originCountry === 'IN') {
    $(".razorpay-btn").attr("style", "display:inline-block");
  }

  let allModals = [];
  const divisor = 1; // for testing purposes 1 million'th of actual value will be used
  const coinMarketCapUrl = "/api/wrapCoinMarketCap";
  const etherScanIo = "https://etherscan.io/tx/";
  const apothemExplorer = "https://explorer.xinfin.network/tx/";
  const mainnetExplorer = "https://explorer.xinfin.network/tx/";

  function takeExam(slug) {
    $.ajax({
      method: "post",
      url: "/api/videoSession",
      data: { courseId: slug.id },
      success: (examId) => {
        if (examId.status == 200) {
          $.notify(examId.message, { type: "success" })
        } else {
          $.notify(examId.message, { type: "danger" })
        }
      }
    })
    $.ajax({
      method: "get",
      url: "/api/current_user",
      success: response => {
        if (response.status) {
          if (confirm(`Certificate will be issued on name "${ response.user.name }" Press OK to confirm or else CANCEL & edit your name via the PROFILE tab.`)) {
            if (slug.id === "course_1") {
              window.location = '/blockchain-basic-exam'
            } else if (slug.id === "course_2") {
              window.location = '/blockchain-advanced-exam'
            } else if (slug.id === "course_3") {
              window.location = '/blockchain-professional-exam'
            } else if (slug.id === "course_4") {
              window.location = '/cloud-computing-exam'
            } else if (slug.id === "course_5") {
              window.location = '/blockchain-wallet-exam'
            }
            else {
              window.location = '/'
            }
          }
        }
      }
    })
  }

  function videoScreen() {
    window.location = '/video-stream'
  }

  function handlePayment(course_id, price) {
    console.log(`Course ID: ${ course_id } & Price: ${ price }`);
    console.log(`Course ID: ${ course_id.id } & Price: ${ price }`);
    const codeName = document.getElementById(course_id.id + "codeName").value;
    console.log(codeName)
    if (codeName.trim().length == 0) {
      // no promo code used
      $(`#btn-paymentModal${ course_id.id }`).click();
    } else {
      $.ajax({
        url: "/api/checkCode",
        method: "post",
        data: { codeName: codeName },
        success: (result) => {
          console.log(result);
          if (result.error == null) {
            console.log("alright")
            const finalAmt = Math.round((parseFloat(price) - parseFloat(result.discAmt)) * 100) / 100;
            if (finalAmt <= 0) {
              pay(course_id, price);
              return;
            } else {
              // Not a free course load the Payment Modal
              $(`#btn-paymentModal${ course_id.id }`).click();
            }
          }
          else {
            $.notify(result.error, { type: "danger" })
          }
        },
        error: xhr => {
          $.notify(xhr.statusText, { type: "danger" })
        }
      })
    }
  }

  function pay(course_id, price) {
    const email = localStorage.getItem('email');
    const codeName = document.getElementById(course_id.id + "codeName").value;
    const referralCode = document.getElementById(course_id.id + "ReferralCode").value;
    console.log(course_id.id + "codeName");
    console.log(codeName);
    $(`#${ course_id.id }`).attr("disabled", true);

    let formNew = document.createElement('form');
    formNew.style.display = "none";
    formNew.action = "/pay";
    formNew.method = "post";
    formNew.style.display = "none";

    let elementEmail = document.createElement("input");
    let elementCourseId = document.createElement("input");
    let elementPrice = document.createElement("input");
    let elementCodeName = document.createElement("input");
    let elementReferralCode = document.createElement("input");

    elementEmail.name = "email";
    elementEmail.value = email;
    formNew.appendChild(elementEmail);

    elementCourseId.name = "course_id";
    elementCourseId.value = course_id.id;
    formNew.appendChild(elementCourseId);

    elementPrice.name = "price";
    elementPrice.value = price;
    formNew.appendChild(elementPrice);

    elementCodeName.name = "codeName";
    elementCodeName.value = codeName;
    formNew.appendChild(elementCodeName);

    elementReferralCode.name = "referralCode";
    elementReferralCode.value = referralCode;
    formNew.appendChild(elementReferralCode);

    document.body.appendChild(formNew);
    formNew.submit();
  }

  function payVideoSub() {
    const email = localStorage.getItem('email');
    let formNew = document.createElement('form');
    formNew.style.display = "none";
    formNew.action = "/pay-video";
    formNew.method = "post";
    formNew.style.display = "none";

    document.body.appendChild(formNew);
    formNew.submit();
  }

  function payRazorpay(course_id, price) {
    const email = localStorage.getItem('email');
    const codeName = document.getElementById(course_id.id + "codeName").value;
    const referralCode = document.getElementById(course_id.id + "ReferralCode").value;
    console.log(course_id.id + "codeName");
    console.log(codeName);
    $.ajax({
      method: "post",
      url: "/api/payRazorpay",
      data: {
        email: email,
        codeName: codeName,
        referralCode: referralCode,
        price: price,
        course_id: course_id.id
      },
      success: (resp) => {
        if (resp.status === true) {
          const { orderId, key, amnt, email, userName } = resp.data;
          const newOrder = {
            key: key, // Enter the Key ID generated from the Dashboard
            amount: `${ amnt }`, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
            currency: "INR",
            name: userName,
            description: "Online Education",
            image: "https://www.blockdegree.org/img/brand/blockdegree_dark.png?v=2",
            order_id: orderId, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
            handler: function (response) {
              const {
                razorpay_payment_id,
                razorpay_order_id,
                razorpay_signature,
              } = response;
              $.ajax({
                url: "/api/completeRazorpayDirect",
                method: "post",
                data: {
                  paymentId: razorpay_payment_id,
                  orderId: razorpay_order_id,
                  signature: razorpay_signature,
                },
                success: (resp) => {
                  if (resp.status == true) {
                    window.location.href = "/exams?paymentSuccess=true"
                  } else {
                    $.notify(resp.error, { type: "danger" });
                  }
                },
                error: (err) => {
                  $.notify(
                    "Some error occured please contact <b>info@blockdegree.org</b>",
                    { type: "danger" }
                  );
                },
              });
            },
            prefill: {
              name: userName,
              email: email,
            },
            theme: {
              color: "#2073d4",
            },
          };
          let rzp1 = new Razorpay(newOrder);
          rzp1.open();
        } else {
          $.notify(resp.error, { type: "danger" })
        }
      },
      error: e => {

      }
    })
  }

  async function payViaXdc(course_id, price) {
    // check if the 
    // need to check if the user is logged in.


    $(`#btn-XinPayNotifier${ course_id.id }`).click();

  }

  function payViaXdce(course_id, price) {
    if (typeof web3 == "undefined") {
      // no web3 provider is available, ask to install XinPay

      if (typeof InstallTrigger !== "undefined") {
        $.notify("Please install <strong><a target='_blank' href='https://addons.mozilla.org/en-US/firefox/addon/ether-metamask'>Metamask</a></strong> and login & setup your wallet to continue, if already did please <a onclick='window.location.reload()'>refresh</a>", { delay: 5000 })
        return;
      }
      else if (!!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime)) {
        $.notify("Please install <strong><a target='_blank' href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en'>Metamask</a></strong> and login & setup your wallet to continue, if already did please <a onclick='window.location.reload()'>refresh</a>", { delay: 5000 })
        return;
      }
      else {
        $.notify("This feature is not available in this browser, please try again using Chrome browser or Firefox", { type: "danger" })
        return;
      }


    }

    web3.version.getNetwork((err, providerNetworkId) => {
      if (err) { $.notify("Oops, error occurred while getting the network ID"); return; }

      // 1 - Mainnet
      // 4 - Rinkeby
      if (providerNetworkId == 1) {
        // is on ethereum mainnet; all ok
        $.ajax({
          method: "get",
          url: coinMarketCapUrl,
          success: async respWhole => {
            let response = respWhole.data;
            if (!response) {
              // New format? 
              $.notify("Some error occured while fetching the current XDC price, please try again later.", { type: "danger" });
              return;
            }
            const priceUsd = parseFloat(response);
            const codeName = document.getElementById(course_id.id + "codeName").value;
            const referralCode = document.getElementById(course_id.id + "ReferralCode").value;
            const xdceRecipient = await getTokenRecipient("1", "xdce");
            if (xdceRecipient == null) {
              $.notify("Something went wrong while fetching the XDCe recipient, please try again later", { type: "danger" });
              return;
            }
            try {
              const codeResp = await $.ajax({
                method: "post",
                url: "/api/checkCode",
                data: { codeName: codeName }
              })
              if (codeResp.error == null) {
                price = Math.round((parseFloat(price) - parseFloat(codeResp.discAmt)) * 100) / 100;
              }
              if (price <= 0) price = 0;
            } catch (e) {
              console.error(e)
            }
            console.log(`Price after discount: ${ price }`);
            if (price == 0) {
              // free course
              try {
                const respFree = await $.ajax({
                  method: "post",
                  url: "/api/payViaXdce",
                  data: { course: course_id.id, price: price }
                });
                if (!respFree.status) {
                  $.notify(respFree.error, { type: "danger" });
                  return;
                }
                alert("Your Course has been availed for free !!");
                window.location.reload();
                return;
              }
              catch (e) {
                $.notify("Some error occured while making the request, please try again after sometime or contact <strong>info@blockdegree.org</strong>", { type: "danger" });

              }
            }
            const coursePriceXdce = parseFloat(price) / (10000 * priceUsd) // dividend of 10000 for testing
            console.log(`Original Price: ${ price } PriceUSD: ${ priceUsd } Final Amnt: ${ coursePriceXdce }`)
            await ethereum.enable();

            const xdceAddrMainnet = "0x41ab1b6fcbb2fa9dced81acbdec13ea6315f2bf2";
            const xdceABI = [
              {
                constant: false,
                inputs: [
                  { name: "_name", type: "string" },
                  { name: "_symbol", type: "string" }
                ],
                name: "updateTokenInformation",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [
                  { name: "addr", type: "address" },
                  { name: "state", type: "bool" }
                ],
                name: "setTransferAgent",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "name",
                outputs: [{ name: "", type: "string" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [
                  { name: "_spender", type: "address" },
                  { name: "_value", type: "uint256" }
                ],
                name: "approve",
                outputs: [{ name: "success", type: "bool" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [
                  { name: "_tokensForPublicSale", type: "uint256" },
                  { name: "_min", type: "uint256" },
                  { name: "_max", type: "uint256" },
                  { name: "_crowdsaleStatus", type: "bool" }
                ],
                name: "setPublicSaleParams",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "_value", type: "uint256" }],
                name: "setTotalTokensForPublicSale",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "totalSupply",
                outputs: [{ name: "", type: "uint256" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [
                  { name: "_from", type: "address" },
                  { name: "_to", type: "address" },
                  { name: "_value", type: "uint256" }
                ],
                name: "transferFrom",
                outputs: [{ name: "success", type: "bool" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "addr", type: "address" }],
                name: "setReleaseAgent",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [],
                name: "destroyToken",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "decimals",
                outputs: [{ name: "", type: "uint256" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [
                  { name: "_min", type: "uint256" },
                  { name: "_max", type: "uint256" }
                ],
                name: "setMinAndMaxEthersForPublicSale",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "value", type: "uint256" }],
                name: "upgrade",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "isCrowdsaleOpen",
                outputs: [{ name: "", type: "bool" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "upgradeAgent",
                outputs: [{ name: "", type: "address" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [],
                name: "releaseTokenTransfer",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "upgradeMaster",
                outputs: [{ name: "", type: "address" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "_value", type: "uint256" }],
                name: "updateTokenPrice",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [{ name: "_owner", type: "address" }],
                name: "balanceOf",
                outputs: [{ name: "balance", type: "uint256" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [],
                name: "acceptOwnership",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "getUpgradeState",
                outputs: [{ name: "", type: "uint8" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: true,
                inputs: [{ name: "", type: "address" }],
                name: "transferAgents",
                outputs: [{ name: "", type: "bool" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [
                  { name: "_investor", type: "address" },
                  { name: "_tokens", type: "uint256" }
                ],
                name: "sendTokensToInvestors",
                outputs: [{ name: "ok", type: "bool" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "owner",
                outputs: [{ name: "", type: "address" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "symbol",
                outputs: [{ name: "", type: "string" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "released",
                outputs: [{ name: "", type: "bool" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "canUpgrade",
                outputs: [{ name: "", type: "bool" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "value", type: "uint256" }],
                name: "decreaseSupply",
                outputs: [{ name: "", type: "bool" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "a", type: "uint256" }, { name: "b", type: "uint256" }],
                name: "safeSub",
                outputs: [{ name: "", type: "uint256" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [
                  { name: "_to", type: "address" },
                  { name: "_value", type: "uint256" }
                ],
                name: "transfer",
                outputs: [{ name: "success", type: "bool" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "value", type: "uint256" }],
                name: "increaseSupply",
                outputs: [{ name: "", type: "bool" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [],
                name: "stopCrowdSale",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "totalUpgraded",
                outputs: [{ name: "", type: "uint256" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [
                  { name: "_addresses", type: "address[]" },
                  { name: "_value", type: "uint256[]" }
                ],
                name: "dispenseTokensToInvestorAddressesByValue",
                outputs: [{ name: "ok", type: "bool" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "a", type: "uint256" }, { name: "b", type: "uint256" }],
                name: "safeMul",
                outputs: [{ name: "", type: "uint256" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [],
                name: "buyTokens",
                outputs: [{ name: "tokenAmount", type: "uint256" }],
                payable: true,
                stateMutability: "payable",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "releaseAgent",
                outputs: [{ name: "", type: "address" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "newOwner",
                outputs: [{ name: "", type: "address" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "agent", type: "address" }],
                name: "setUpgradeAgent",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "_newSupply", type: "uint256" }],
                name: "updateOnSaleSupply",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: true,
                inputs: [
                  { name: "_owner", type: "address" },
                  { name: "_spender", type: "address" }
                ],
                name: "allowance",
                outputs: [{ name: "remaining", type: "uint256" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: true,
                inputs: [],
                name: "onSaleTokens",
                outputs: [{ name: "", type: "uint256" }],
                payable: false,
                stateMutability: "view",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "a", type: "uint256" }, { name: "b", type: "uint256" }],
                name: "safeAdd",
                outputs: [{ name: "", type: "uint256" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "_tokens", type: "uint256" }],
                name: "sendTokensToOwner",
                outputs: [{ name: "ok", type: "bool" }],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [],
                name: "startCrowdSale",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "_newOwner", type: "address" }],
                name: "transferOwnership",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                constant: false,
                inputs: [{ name: "master", type: "address" }],
                name: "setUpgradeMaster",
                outputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "function"
              },
              {
                inputs: [],
                payable: false,
                stateMutability: "nonpayable",
                type: "constructor"
              },
              { payable: true, stateMutability: "payable", type: "fallback" },
              {
                anonymous: false,
                inputs: [
                  { indexed: false, name: "newName", type: "string" },
                  { indexed: false, name: "newSymbol", type: "string" }
                ],
                name: "UpdatedTokenInformation",
                type: "event"
              },
              {
                anonymous: false,
                inputs: [
                  { indexed: true, name: "_from", type: "address" },
                  { indexed: true, name: "_to", type: "address" }
                ],
                name: "OwnershipTransferred",
                type: "event"
              },
              {
                anonymous: false,
                inputs: [
                  { indexed: true, name: "_from", type: "address" },
                  { indexed: true, name: "_to", type: "address" },
                  { indexed: false, name: "_value", type: "uint256" }
                ],
                name: "Upgrade",
                type: "event"
              },
              {
                anonymous: false,
                inputs: [{ indexed: false, name: "agent", type: "address" }],
                name: "UpgradeAgentSet",
                type: "event"
              },
              {
                anonymous: false,
                inputs: [
                  { indexed: true, name: "from", type: "address" },
                  { indexed: true, name: "to", type: "address" },
                  { indexed: false, name: "value", type: "uint256" }
                ],
                name: "Transfer",
                type: "event"
              },
              {
                anonymous: false,
                inputs: [
                  { indexed: true, name: "owner", type: "address" },
                  { indexed: true, name: "spender", type: "address" },
                  { indexed: false, name: "value", type: "uint256" }
                ],
                name: "Approval",
                type: "event"
              }
            ]
            let XDCeContract = web3.eth.contract(xdceABI);
            let xdceInst = XDCeContract.at(xdceAddrMainnet);
            console.log(web3.eth.defaultAccount)
            console.log(web3.version.api);
            let tx = {
              to: xdceAddrMainnet
            };
            let xdcePrice = await getXinEquivalent(price)
            console.log("XDCe Price: ", xdcePrice)
            // prettier-ignore

            xdceInst.transfer.sendTransaction(xdceRecipient, xdcePrice, tx, (err, result) => {
              if (err != null) {
                $.notify(`Some error occured while creating the transaction, please try again later or inform ust at <strong>info@blockdegree.org</strong>`, { type: "danger" })
                return;
              }
              // result is transaction hash

              const modTitle = "<strong>Transaction Submitted Successfully</strong>";
              const modBody = "Your transaction has been successfully submitted. Once your transaction will be confirmed, processing of the payment will be initiated. Please don't leave this page untill your transaction is confirmed. Your trasnaction hash is <div style='display:none;' id='pending_txHash' >" + result + "</div> " + `<a href="${ etherScanIo + result }" target="_blank">${ result.toString().slice(0, 11) }...</a> <button onclick="copyTextToClipboard('pending_txHash')" >Click</button> to copy hash`;

              openModal("modal-info", modTitle, modBody);

              $.notify("Transaction is <strong>pending</strong> . . .", {
                type: "warning", allow_dismiss: false, delay: Date.now(), placement: {
                  from: 'bottom',
                  align: 'right'
                }
              });

              $.ajax({
                method: "post",
                url: "/api/payViaXdce",
                data: { txn_hash: result, course: course_id.id, price: price, codeName: codeName, referralCode: referralCode },
                success: resp => {
                  if (resp.status) {
                    const modTitle = "<strong>Transaction Received Successfully</strong>";
                    const modBody = "Your transaction has been successfully submitted & received. Once your transaction has enough confirmations, your payment will be completed. You can check the state of your payment in the <strong><a href='/profile?inFocus=cryptoPayment'>Profile</a></strong> page. Your trasnaction hash is <div style='visibility:hidden' id='confirmed_txHash' >" + result + "</div> " + `<a href="${ etherScanIo + result }" target="_blank">${ result.toString().slice(0, 11) }...</a>. Click on link to view on etherscan.`;
                    openModal("modal-success", modTitle, modBody);
                    $.notifyClose('bottom-right')
                    return;
                  } else {
                    // something went wrong, ask to store tx & mail to info@blockdegree.org

                    const modTitle = "<strong>Some Error Occured</strong>";
                    const modBody = resp.error + ".Your trasnaction hash is <div style='display:none' id='confirmed_err_txHash' >" + result + "</div> " + `<a href="${ etherScanIo + result }" target="_blank">${ result.toString().slice(0, 11) }...</a> <button onclick="copyTextToClipboard('confirmed_err_txHash')" >Click</button> to copy hash`;
                    openModal("modal-warning", modTitle, modBody);
                    $.notifyClose('bottom-right')
                  }
                },
                error: xhr => {
                  $.notify(`<strong>Fatal Error</strong> : Fatal Error occured while connecting with our server. Please note your tx-hash <strong>${ result }</strong> and send a mail to <strong>info@blockdegree.org</strong>`, { type: "danger", delay: 10000 })
                  $.notifyClose('bottom-right')
                  return;
                }
              })
              return;
            })

          },
          error: xhr => {

            $.notify("Some error occured while fetching the current XDC price, please try again later.", { type: "danger", delay: 10000 });
            return;

          }
        })
      }
      else {
        // Looks like you're using some other web-extension as web3 provider. Please disable other web3 extensions like metamask, mist and enable only XinPay & then try again.
        const modTitle = "<strong>You're connected to wrong network</strong>";
        let modBody;
        if (typeof InstallTrigger !== "undefined") {
          // firefox
          modBody = "Inorder to make a payment via XDCe, your extension needs to be connected to the Ethereum Mainnet.<br/>Please open your web extension and connect to Ethereum Mainnet. If your extension does'nt support connection to ethereum mainnet, then please install a compatible extension like <strong><a target='_blank' href='https://addons.mozilla.org/en-US/firefox/addon/ether-metamask'>Metamask</a></strong> & disable other incompatible wallets <br/>If you've switched to ethereum mainnet, please <a onclick='window.location.reload()'>refresh</a>."
        }
        else if (!!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime)) {
          // chrome
          modBody = "Inorder to make a payment via XDCe, your extension needs to be connected to the Ethereum Mainnet.<br/>Please open your web extension and connect to Ethereum Mainnet. If your extension does'nt support connection to ethereum mainnet, then please install a compatible extension like <strong><a target='_blank' href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en'>Metamask</a></strong> & disable other incompatible wallets <br/>If you've switched to ethereum mainnet, please <a onclick='window.location.reload()'>refresh</a>."
        }
        openModal("modal-info", modTitle, modBody)
        return;
      }
    })

  }


  // using 10000 as the divisor for testing purpose
  async function launchXinPay(course_id, price) {

    const codeName = document.getElementById(course_id.id + "codeName").value;
    const referralCode = document.getElementById(course_id.id + "ReferralCode").value;

    let txPrice = price;
    try {
      const codeResp = await $.ajax({
        method: "post",
        url: "/api/checkCode",
        data: { codeName: codeName }
      })
      if (codeResp.error == null) {
        txPrice = Math.round((parseFloat(price) - parseFloat(codeResp.discAmt)) * 100) / 100;
      }
      if (txPrice <= 0) txPrice = 0;
    } catch (e) {
      console.error(e)
    }
    console.log(`Price after discount: ${ txPrice }`);
    if (txPrice == 0) {
      // free course
      try {
        const respFree = await $.ajax({
          method: "post",
          url: "/api/payViaXdce",
          data: { course: course_id.id, price: price, codeName: codeName }
        });
        if (!respFree.status) {

          $.notify(respFree.error, { type: "danger" });
          return;
        }
        alert("Your Course has been availed for free !!");
        window.location.reload();
        return;
      }
      catch (e) {
        $.notify("Some error occured while making the request, please try again after sometime or contact <strong>info@blockdegree.org</strong>", { type: "danger" });
        return;
      }
    }
    console.log("TypeOf Web3: ", typeof web3);
    if (typeof web3 == "undefined") {
      // no web3 provider is available, ask to install XinPay
      $.notify("Please install <strong><a target='_blank' href='https://chrome.google.com/webstore/detail/xinpay/bocpokimicclpaiekenaeelehdjllofo'>XinPay</a></strong> and login & setup your wallet to continue, if already did please <a onclick='window.location.reload()'>refresh</a>", { delay: 5000 })
      return;
    }

    web3.version.getNetwork((err, providerNetworkId) => {
      if (err) { $.notify("Oops, error occurred while getting the network ID"); return; }

      if (providerNetworkId == 50) {
        if (web3.eth.coinbase == undefined) {
          $.notify("Please login & setup your <strong>XinPay</strong> web-extension to continue, if already did please <a onclick='window.location.reload()'>refresh</a>")
          return;
        }
        // is on XinFin mainnet
        $.ajax({
          method: "get",
          url: coinMarketCapUrl,
          success: async respWhole => {
            let response = respWhole.data
            if (!response) {
              // New format? 
              $.notify("Some error occured while fetching the current XDC price, please try again later.", { type: "danger" });
              return;
            }
            const priceUsd = parseFloat(response);
            const coursePriceXdc = parseFloat(txPrice) / priceUsd
            console.log(`Original Price: ${ txPrice } PriceUSD: ${ priceUsd } Final Amnt: ${ coursePriceXdc }`)
            await ethereum.enable();
            const xdcRecipient = await getTokenRecipient("50", "xdc");
            if (xdcRecipient == null) {
              $.notify("Something went wrong while fetching the XDC recipient, please try again later", { type: "danger" });
              return;
            }
            web3.eth.sendTransaction({ to: "0x" + xdcRecipient.slice(3,), gasPrice: web3.toWei(11, "gwei"), value: web3.toWei(coursePriceXdc, "ether") }, (err, result) => {
              if (err) {
                console.error(err)
                $.notify("<b>XinPay</b> : Some error while creating or processing this transaction.", { type: "danger" });
                return;
              }
              else {
                console.log("Transaction Hash: ", result);

                const modTitle = "<strong>Transaction Submitted Successfully</strong>";
                const modBody = "Your transaction has been successfully submitted. Once your transaction will be confirmed, processing of the payment will be initiated. Please don't leave this page untill your transaction is confirmed. Your trasnaction hash is <div style='display:none;' id='pending_txHash' >" + result + "</div> " + `<a href="${ apothemExplorer + result }" target="_blank">${ result.toString().slice(0, 11) }...</a> <button onclick="copyTextToClipboard('pending_txHash')" >Click</button> to copy hash`;

                openModal("modal-info", modTitle, modBody);

                $.notify("Transaction is <strong>pending</strong> . . .", {
                  type: "warning", allow_dismiss: false, delay: Date.now(), placement: {
                    from: 'bottom',
                    align: 'right'
                  }
                });

                $.ajax({
                  method: "post",
                  url: "/api/payViaXdc",
                  data: { course: course_id.id, price: txPrice, txn_hash: result, codeName: codeName, referralCode: referralCode },
                  success: response => {
                    if (!response.status) {
                      // Error, its ok.
                      const modTitle = "<strong>Some Error Occured</strong>";
                      const modBody = response.error + ".Your trasnaction hash is <div style='display:none' id='confirmed_err_txHash' >" + result + "</div> " + `<a href="${ apothemExplorer + result }" target="_blank">${ result.toString().slice(0, 11) }...</a> <button onclick="copyTextToClipboard('confirmed_err_txHash')" >Click</button> to copy hash`;
                      openModal("modal-warning", modTitle, modBody);
                      $.notifyClose('bottom-right')
                      return
                    } else {

                      const modTitle = "<strong>Transaction Received Successfully</strong>";
                      const modBody = "Your transaction has been successfully submitted & received. Once your transaction has enough confirmations, your payment will be completed. You can check the state of your payment in the <strong><a href='/profile?inFocus=cryptoPayment'>Profile</a></strong> page. Your trasnaction hash is <div style='visibility:hidden' id='confirmed_txHash' >" + result + "</div> " + `<a href="${ apothemExplorer + result }" target="_blank">${ result.toString().slice(0, 11) }...</a>. Click on link to view on XinFin Explorer.`;
                      openModal("modal-success", modTitle, modBody);
                      $.notifyClose('bottom-right')
                      return;
                    }
                  },
                  error: xhr => {
                    // YIKES, ask to copy txn & mail at info@blockdegree.org
                    $.notifyClose('bottom-right')
                    $.notify(`<b>Error</b> : Your txn was processed, but something went from our side. Don't worry, just send a mail to <strong>info@blockdegree.org</strong> with your tx hash.`, { type: "success" });
                    return;
                  }
                })
              }

            })
          },
          error: xhr => {

            $.notify("Some error occured while fetching the current XDC price, please try again later.", { type: "danger", delay: 10000 });
            return;

          }
        })
      }
      else if (providerNetworkId == 50) {
        // User is on Apothem
        $.notify("Looks like your wallet is on XinFin Mainnet Network, please switch to XinFin Apothem to make payment, if already did please <a onclick='window.location.reload()'>refresh</a>", { type: "danger", delay: 5000 });
        return;
      }
      else {
        // Looks like you're using some other web-extension as web3 provider. Please disable other web3 extensions like metamask, mist and enable only XinPay & then try again.
        $.notify("Looks like you're using some other web-extension as web3 provider. Please <b>disable</b> other web3 extensions like <b>Metamask</b>, <b>Mist</b> and enable only <b>XinPay</b> & then try again, if already did please <a onclick='window.location.reload()'>refresh</a>", { type: "danger", delay: 5000 });
        return;
      }
    })
  }

  function checkCode(course_id, price) {
    const codeName = document.getElementById(course_id.id + "codeName").value;
    $.ajax({
      url: "/api/checkCode",
      method: "post",
      data: { codeName: codeName },
      success: (result) => {
        console.log(result);
        if (result.error == null) {
          const finalAmt = Math.round((parseFloat(price) - parseFloat(result.discAmt)) * 100) / 100;
          if (finalAmt < 0) {
            // free course
            document.getElementById(course_id.id + "curr_price").innerHTML = "$0";
          }
          else {
            document.getElementById(course_id.id + "curr_price").innerHTML = "$" + finalAmt;
          }
        }
        else {
          $.notify(result.error, { type: "danger" })
        }
      }
    })
  }

  async function getXinEquivalent(amnt) {
    try {
      const respWhole = await $.ajax({ method: "get", url: coinMarketCapUrl });
      const currXinPrice = respWhole.data;
      console.log(currXinPrice);
      console.log("Response from CMC: ", currXinPrice)
      if (currXinPrice != undefined || currXinPrice != undefined) {
        const retPrice = (parseFloat(amnt) / (parseFloat(currXinPrice) * divisor)) * Math.pow(10, 18);
        console.log("ret price: ", retPrice)
        return (
          retPrice
        );
      }
    } catch (e) {

      console.error(
        "Some error occurred while making or processing call from CoinMarketCap", e
      );
      return -1;

    }
  }

  function fallbackCopyTextToClipboard(text) {
    var textArea = document.createElement("textarea");
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
      var successful = document.execCommand('copy');
      var msg = successful ? 'successful' : 'unsuccessful';
      console.log('Fallback: Copying text command was ' + msg);
    } catch (err) {
      console.error('Fallback: Oops, unable to copy', err);
    }

    document.body.removeChild(textArea);
  }
  function copyTextToClipboard(containerId) {
    let text = document.getElementById(containerId).innerHTML;
    if (!navigator.clipboard) {
      fallbackCopyTextToClipboard(text);
      return;
    }
    navigator.clipboard.writeText(text).then(function () {
      console.log('Async: Copying to clipboard was successful!');
    }, function (err) {
      console.error('Async: Could not copy text: ', err);
    });
  }

  function openModal(modalType, modalTitle, modalBody) {
    // check if a modal is already open, then wait forthe modal to close.
    allModals.push({ modalType: modalType, modalTitle: modalTitle, modalBody: modalBody });
    if (allModals.length > 1) {
      console.log("modal is open");
    }
    else {
      // directly show
      const hashModalTitle = document.getElementById("displayHashModal-title");
      const hashModalBody = document.getElementById("displayHashModal-body");
      setModalType(modalType);
      hashModalTitle.innerHTML = modalTitle;
      hashModalBody.innerHTML = modalBody;
      document.getElementById("btn-displayHashModal").click();
      console.log($('#displayHashModal').hasClass('in'));
      console.log($('#displayHashModal').is(':visible'));
    }
  }

  $('#displayHashModal').on('hidden.bs.modal', function (e) {
    console.log(e);
    allModals.shift();
    if (allModals.length > 0) {
      let firstModal = allModals[0];
      const hashModalTitle = document.getElementById("displayHashModal-title");
      const hashModalBody = document.getElementById("displayHashModal-body");
      setModalType(firstModal.modalType);
      hashModalTitle.innerHTML = firstModal.modalTitle;
      hashModalBody.innerHTML = firstModal.modalBody;
      document.getElementById("btn-displayHashModal").click();
    }
  })

  function setModalType(modalType) {
    // remove all
    $("#modal-header-wrp").removeClass("modal-success");
    $("#modal-header-wrp").removeClass("modal-warning");
    $("#modal-header-wrp").removeClass("modal-info");

    $("#displayHashModal-footer").removeClass('modal-success');
    $("#displayHashModal-footer").removeClass('modal-warning');
    $("#displayHashModal-footer").removeClass('modal-info');

    // add modalType
    $("#modal-header-wrp").addClass(modalType);
    $("#displayHashModal-footer").addClass(modalType);
  }

  async function getTokenRecipient(wallet_network, wallet_token_name) {
    try {
      let retData = await $.ajax({
        method: "post",
        "url": "/api/getTokenRecipient",
        data: { wallet_network: wallet_network, wallet_token_name: wallet_token_name }
      });
      if (!retData.status) {
        console.error("Error while making call to the API getTokenRecipient: ", retData.error);
        return null;
      }
      else {
        // status ok
        return retData.data.wallet_address;
      }
    }
    catch (e) {
      console.error("Some error occured while executing the function getTokenRecipient: ", e);
      return null;
    }

  }

  function checkReferralCode(course) {
    const courseId = course.id;
    const referralCode = document.getElementById(`${ courseId }ReferralCode`).value;
    console.log(`Referral Code: ${ referralCode }`);
    $.ajax({
      method: "post",
      url: "/api/checkReferralCode",
      data: { referralCode: referralCode },
      success: res => {
        if (!res.status) {
          $.notify(`<strong>Error</strong>: ${ res.error }`, { type: 'danger' });
          return;
        }
        $.notify(`Referral code is <strong>valid</strong> !`)
      },
      error: xhr => {
        return $.notify(`<strong>Error</strong>: Some error occured while making a request to the server`, { type: "danger" });
      }
    })
  }
</script>